// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid         String       @id // Firebase UID as primary key
  email       String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  username    String?      @unique
  nickname    String?
  avatar      String?
  bio         String?      @db.Text
  mood        String?      @db.Text
  totalEarned Float        @default(0)
  balance     Float        @default(0)
  buzzes      Buzz[]
  replies     Reply[]
  withdrawals Withdrawal[]

  @@index([uid])
  @@index([email])
  @@index([username])
}

model Buzz {
  id           String        @id @default(cuid())
  tweetLink    String
  instructions String        @db.Text
  price        Float
  createdAt    DateTime      @default(now())
  createdBy    String // Firebase UID
  deadline     DateTime
  replyCount   Int           @default(0)
  totalReplies Int           @default(0)
  isActive     Boolean       @default(true)
  isSettled    Boolean       @default(false)
  replies      Reply[]
  transactions Transaction[]
  user         User          @relation(fields: [createdBy], references: [uid])
  tweetText String?

  @@index([createdBy])
  @@index([createdAt])
  @@index([isSettled])
}

model Reply {
  id          String       @id @default(cuid())
  replyLink   String
  text        String       @db.Text
  createdAt   DateTime     @default(now())
  createdBy   String // Firebase UID
  status      ReplyStatus  @default(PENDING)
  buzz        Buzz         @relation(fields: [buzzId], references: [id])
  buzzId      String
  transaction Transaction?
  user        User         @relation(fields: [createdBy], references: [uid])

  @@index([buzzId])
  @@index([createdBy])
  @@index([status])
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  type        TransactionType
  status      TransactionStatus
  createdAt   DateTime          @default(now())
  settledAt   DateTime?
  fromAddress String
  toAddress   String
  buzz        Buzz              @relation(fields: [buzzId], references: [id])
  buzzId      String
  reply       Reply?            @relation(fields: [replyId], references: [id])
  replyId     String?           @unique

  @@index([status])
  @@index([buzzId])
  @@index([fromAddress])
  @@index([toAddress])
}

model Withdrawal {
  id        String           @id @default(cuid())
  userId    String
  amount    Float
  address   String
  status    WithdrawalStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [uid])

  @@index([userId])
  @@index([status])
}

model Referral {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitedUserId String  @unique
  invitorUserId String?

  @@index([invitedUserId])
  @@index([invitorUserId])
}

enum ReplyStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  REWARD
  BURN
  REFERRAL_REWARD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  FAILED
}
