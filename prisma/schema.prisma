// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid         String       @id // Firebase UID as primary key
  email       String?      @unique
  twitterUsername String?  @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  username    String?      @unique
  nickname    String?
  avatar      String?
  bio         String?      @db.Text
  mood        String?      @db.Text
  totalEarned Float        @default(0)
  balance     Float        @default(0)
  buzzes      Buzz[]
  replies     Reply[]
  replyAttempts ReplyAttempt[]
  withdrawals Withdrawal[]
  userBalances UserBalance[]
  withdrawRequests UserWithdrawRequest[]
  bindedWallet String?    @unique
  kolStatus String? // null pending confimed
  kolInfo     Kol?
  settleHistories SettleHistory[]

  @@index([uid])
  @@index([email])
  @@index([username])
}

model Kol {
  id           String        @id @default(cuid())
  userId String? @unique
  avatar String
  twitterUsername String @unique
  nickname String
  status String // pending confirmed
  score  Float   
  followers Int
  description String
  area Int // 1-欧美 2-韩国 3-中国 4-日本 5-东南亚
  kolBalances KolBalance[]
  settleHistories SettleHistory[]

  user         User?          @relation(fields: [userId], references: [uid])
}

model Buzz {
  id           String        @id @default(cuid())
  tweetLink    String
  instructions String        @db.Text
  createdAt    DateTime      @default(now())
  createdBy    String // Firebase UID
  deadline     DateTime
  replyCount   Int           @default(0)
  isActive     Boolean       @default(true)
  isSettled    Boolean       @default(false)
  replies      Reply[]
  replyAttempts ReplyAttempt[]
  transactions Transaction[]
  user         User          @relation(fields: [createdBy], references: [uid])
  tweetText    String?
  rewardSettleType String?
  maxParticipants Int?
  participantMinimumTokenAmount String?
  settleHistories SettleHistory[]

  tokenAmount String
  paymentToken String // BNB CUSTOM
  customTokenAddress String // 0x0000000000000
  tokenDecimals Int
  transactionHash String @unique

  shareOfKols Int @default(50)
  shareOfHolders Int @default(40)
  shareOfOthers Int @default(10)

  tokenInfoId String?
  tokenInfo TokenInfo? @relation(fields: [tokenInfoId], references: [id])

  @@index([createdBy])
  @@index([createdAt])
  @@index([isSettled])
}

model Reply {
  id          String       @id @default(cuid())
  replyLink   String       @unique
  text        String       @db.Text
  createdAt   DateTime     @default(now())
  createdBy   String // Firebase UID
  status      ReplyStatus  @default(PENDING)
  buzz        Buzz         @relation(fields: [buzzId], references: [id])
  buzzId      String
  transaction Transaction?
  user        User         @relation(fields: [createdBy], references: [uid])
  userRole    String       @default("normal")

  @@index([buzzId])
  @@index([createdBy])
  @@index([status])
}

model ReplyAttempt {
  id          String       @id @default(cuid())
  buzzId      String
  buzz        Buzz         @relation(fields: [buzzId], references: [id])

  userId      String
  user        User         @relation(fields: [userId], references: [uid])
  userRole    String       @default("normal")

  retryCount  Int          @default(0)

  updatedAt   Int         

  @@index([updatedAt])
}

model SettleHistory {
  id           String            @id @default(cuid())
  buzzId       String
  settleAmount String
  kolId        String?
  userId       String?
  createdAt    DateTime          @default(now())
  type String  // Refund KOL Normal

  buzz        Buzz              @relation(fields: [buzzId], references: [id])
  kol         Kol?      @relation(fields: [kolId], references: [id])
  user         User?      @relation(fields: [userId], references: [uid])
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  type        TransactionType
  status      TransactionStatus
  createdAt   DateTime          @default(now())
  settledAt   DateTime?
  fromAddress String
  toAddress   String
  buzz        Buzz              @relation(fields: [buzzId], references: [id])
  buzzId      String
  reply       Reply?            @relation(fields: [replyId], references: [id])
  replyId     String?           @unique

  @@index([status])
  @@index([buzzId])
  @@index([fromAddress])
  @@index([toAddress])
}

model Withdrawal {
  id        String           @id @default(cuid())
  userId    String
  amount    Float
  address   String
  status    WithdrawalStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [uid])

  @@index([userId])
  @@index([status])
}

model Referral {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitedUserId String  @unique
  invitorUserId String?

  @@index([invitedUserId])
  @@index([invitorUserId])
}

model UserBalance {
  id String @id @default(cuid())

  userId    String
  tokenAmountOnChain BigInt
  tokenName String
  tokenAddress String
  tokenDecimals Int

  user      User             @relation(fields: [userId], references: [uid])

  @@unique([userId, tokenAddress]) // Each user can have only one balance per token
}

model KolBalance {
  id String @id @default(cuid())

  kolId    String
  tokenAmountOnChain BigInt
  tokenName String
  tokenAddress String
  tokenDecimals Int

  kol      Kol             @relation(fields: [kolId], references: [id])

  @@unique([kolId, tokenAddress]) // Each kol can have only one balance per token
}

model UserWithdrawRequest {
  id String @id @default(cuid())

  userId String
  nonceOnChain String
  tokenAddresses String[]
  tokenAmountsOnChain BigInt[]
  tokenDecimals Int[]

  user      User             @relation(fields: [userId], references: [uid])

  @@unique([userId, nonceOnChain]) // Each user can have only one balance per token
}

model UserApiKey {
  id String @id @default(cuid())

  userId String @unique
  apiKey String @unique
}

model TokenInfo {
  id String @id @default(cuid())

  chainId Int 
  tokenAddress String

  symbol String
  decimals Int
  logo String

  price Float
  url String

  buzzes Buzz[]

  @@unique([chainId, tokenAddress])
}

enum ReplyStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  REWARD
  BURN
  REFERRAL_REWARD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  FAILED
}
